/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.10.0
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbstractType from './AbstractType';
import FunctionType from './FunctionType';
import ListType from './ListType';
import MapType from './MapType';
import PrimitiveType from './PrimitiveType';
import WellKnownType from './WellKnownType';

/**
 * The V1alpha1Type model module.
 * @module model/V1alpha1Type
 * @version v0.10.0
 */
class V1alpha1Type {
    /**
     * Constructs a new <code>V1alpha1Type</code>.
     * Represents a CEL type.
     * @alias module:model/V1alpha1Type
     */
    constructor() { 
        
        V1alpha1Type.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V1alpha1Type</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1alpha1Type} obj Optional instance to populate.
     * @return {module:model/V1alpha1Type} The populated <code>V1alpha1Type</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1alpha1Type();

            if (data.hasOwnProperty('dyn')) {
                obj['dyn'] = ApiClient.convertToType(data['dyn'], Object);
            }
            if (data.hasOwnProperty('null')) {
                obj['null'] = ApiClient.convertToType(data['null'], 'String');
            }
            if (data.hasOwnProperty('primitive')) {
                obj['primitive'] = PrimitiveType.constructFromObject(data['primitive']);
            }
            if (data.hasOwnProperty('wrapper')) {
                obj['wrapper'] = PrimitiveType.constructFromObject(data['wrapper']);
            }
            if (data.hasOwnProperty('wellKnown')) {
                obj['wellKnown'] = WellKnownType.constructFromObject(data['wellKnown']);
            }
            if (data.hasOwnProperty('listType')) {
                obj['listType'] = ListType.constructFromObject(data['listType']);
            }
            if (data.hasOwnProperty('mapType')) {
                obj['mapType'] = MapType.constructFromObject(data['mapType']);
            }
            if (data.hasOwnProperty('function')) {
                obj['function'] = FunctionType.constructFromObject(data['function']);
            }
            if (data.hasOwnProperty('messageType')) {
                obj['messageType'] = ApiClient.convertToType(data['messageType'], 'String');
            }
            if (data.hasOwnProperty('typeParam')) {
                obj['typeParam'] = ApiClient.convertToType(data['typeParam'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = V1alpha1Type.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], Object);
            }
            if (data.hasOwnProperty('abstractType')) {
                obj['abstractType'] = AbstractType.constructFromObject(data['abstractType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1alpha1Type</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1alpha1Type</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['null'] && !(typeof data['null'] === 'string' || data['null'] instanceof String)) {
            throw new Error("Expected the field `null` to be a primitive type in the JSON string but got " + data['null']);
        }
        // validate the optional field `listType`
        if (data['listType']) { // data not null
          ListType.validateJSON(data['listType']);
        }
        // validate the optional field `mapType`
        if (data['mapType']) { // data not null
          MapType.validateJSON(data['mapType']);
        }
        // validate the optional field `function`
        if (data['function']) { // data not null
          FunctionType.validateJSON(data['function']);
        }
        // ensure the json data is a string
        if (data['messageType'] && !(typeof data['messageType'] === 'string' || data['messageType'] instanceof String)) {
            throw new Error("Expected the field `messageType` to be a primitive type in the JSON string but got " + data['messageType']);
        }
        // ensure the json data is a string
        if (data['typeParam'] && !(typeof data['typeParam'] === 'string' || data['typeParam'] instanceof String)) {
            throw new Error("Expected the field `typeParam` to be a primitive type in the JSON string but got " + data['typeParam']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          V1alpha1Type.validateJSON(data['type']);
        }
        // validate the optional field `abstractType`
        if (data['abstractType']) { // data not null
          AbstractType.validateJSON(data['abstractType']);
        }

        return true;
    }


}



/**
 * Dynamic type.
 * @member {Object} dyn
 */
V1alpha1Type.prototype['dyn'] = undefined;

/**
 * Null value.
 * @member {String} null
 */
V1alpha1Type.prototype['null'] = undefined;

/**
 * @member {module:model/PrimitiveType} primitive
 */
V1alpha1Type.prototype['primitive'] = undefined;

/**
 * @member {module:model/PrimitiveType} wrapper
 */
V1alpha1Type.prototype['wrapper'] = undefined;

/**
 * @member {module:model/WellKnownType} wellKnown
 */
V1alpha1Type.prototype['wellKnown'] = undefined;

/**
 * @member {module:model/ListType} listType
 */
V1alpha1Type.prototype['listType'] = undefined;

/**
 * @member {module:model/MapType} mapType
 */
V1alpha1Type.prototype['mapType'] = undefined;

/**
 * @member {module:model/FunctionType} function
 */
V1alpha1Type.prototype['function'] = undefined;

/**
 * Protocol buffer message type.  The `message_type` string specifies the qualified message type name. For example, `google.plus.Profile`.
 * @member {String} messageType
 */
V1alpha1Type.prototype['messageType'] = undefined;

/**
 * Type param type.  The `type_param` string specifies the type parameter name, e.g. `list<E>` would be a `list_type` whose element type was a `type_param` type named `E`.
 * @member {String} typeParam
 */
V1alpha1Type.prototype['typeParam'] = undefined;

/**
 * @member {module:model/V1alpha1Type} type
 */
V1alpha1Type.prototype['type'] = undefined;

/**
 * Error type.  During type-checking if an expression is an error, its type is propagated as the `ERROR` type. This permits the type-checker to discover other errors present in the expression.
 * @member {Object} error
 */
V1alpha1Type.prototype['error'] = undefined;

/**
 * @member {module:model/AbstractType} abstractType
 */
V1alpha1Type.prototype['abstractType'] = undefined;






export default V1alpha1Type;

