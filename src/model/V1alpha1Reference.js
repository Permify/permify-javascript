/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.8.0
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Constant from './Constant';

/**
 * The V1alpha1Reference model module.
 * @module model/V1alpha1Reference
 * @version v0.8.0
 */
class V1alpha1Reference {
    /**
     * Constructs a new <code>V1alpha1Reference</code>.
     * Describes a resolved reference to a declaration.
     * @alias module:model/V1alpha1Reference
     */
    constructor() { 
        
        V1alpha1Reference.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V1alpha1Reference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1alpha1Reference} obj Optional instance to populate.
     * @return {module:model/V1alpha1Reference} The populated <code>V1alpha1Reference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1alpha1Reference();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('overloadId')) {
                obj['overloadId'] = ApiClient.convertToType(data['overloadId'], ['String']);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = Constant.constructFromObject(data['value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1alpha1Reference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1alpha1Reference</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['overloadId'])) {
            throw new Error("Expected the field `overloadId` to be an array in the JSON data but got " + data['overloadId']);
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          Constant.validateJSON(data['value']);
        }

        return true;
    }


}



/**
 * The fully qualified name of the declaration.
 * @member {String} name
 */
V1alpha1Reference.prototype['name'] = undefined;

/**
 * For references to functions, this is a list of `Overload.overload_id` values which match according to typing rules.  If the list has more than one element, overload resolution among the presented candidates must happen at runtime because of dynamic types. The type checker attempts to narrow down this list as much as possible.  Empty if this is not a reference to a [Decl.FunctionDecl][google.api.expr.v1alpha1.Decl.FunctionDecl].
 * @member {Array.<String>} overloadId
 */
V1alpha1Reference.prototype['overloadId'] = undefined;

/**
 * @member {module:model/Constant} value
 */
V1alpha1Reference.prototype['value'] = undefined;






export default V1alpha1Reference;

