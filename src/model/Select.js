/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.8.8
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Expr from './Expr';

/**
 * The Select model module.
 * @module model/Select
 * @version v0.8.8
 */
class Select {
    /**
     * Constructs a new <code>Select</code>.
     * A field selection expression. e.g. &#x60;request.auth&#x60;.
     * @alias module:model/Select
     */
    constructor() { 
        
        Select.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Select</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Select} obj Optional instance to populate.
     * @return {module:model/Select} The populated <code>Select</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Select();

            if (data.hasOwnProperty('operand')) {
                obj['operand'] = Expr.constructFromObject(data['operand']);
            }
            if (data.hasOwnProperty('field')) {
                obj['field'] = ApiClient.convertToType(data['field'], 'String');
            }
            if (data.hasOwnProperty('testOnly')) {
                obj['testOnly'] = ApiClient.convertToType(data['testOnly'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Select</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Select</code>.
     */
    static validateJSON(data) {
        // validate the optional field `operand`
        if (data['operand']) { // data not null
          Expr.validateJSON(data['operand']);
        }
        // ensure the json data is a string
        if (data['field'] && !(typeof data['field'] === 'string' || data['field'] instanceof String)) {
            throw new Error("Expected the field `field` to be a primitive type in the JSON string but got " + data['field']);
        }

        return true;
    }


}



/**
 * @member {module:model/Expr} operand
 */
Select.prototype['operand'] = undefined;

/**
 * Required. The name of the field to select.  For example, in the select expression `request.auth`, the `auth` portion of the expression would be the `field`.
 * @member {String} field
 */
Select.prototype['field'] = undefined;

/**
 * Whether the select is to be interpreted as a field presence test.  This results from the macro `has(request.auth)`.
 * @member {Boolean} testOnly
 */
Select.prototype['testOnly'] = undefined;






export default Select;

