/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.7.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeDefinition from './AttributeDefinition';
import EntityDefinitionReference from './EntityDefinitionReference';
import PermissionDefinition from './PermissionDefinition';
import RelationDefinition from './RelationDefinition';

/**
 * The EntityDefinition model module.
 * @module model/EntityDefinition
 * @version v0.7.9
 */
class EntityDefinition {
    /**
     * Constructs a new <code>EntityDefinition</code>.
     * The EntityDefinition message provides detailed information about a specific entity.
     * @alias module:model/EntityDefinition
     */
    constructor() { 
        
        EntityDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EntityDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntityDefinition} obj Optional instance to populate.
     * @return {module:model/EntityDefinition} The populated <code>EntityDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntityDefinition();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('relations')) {
                obj['relations'] = ApiClient.convertToType(data['relations'], {'String': RelationDefinition});
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], {'String': PermissionDefinition});
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': AttributeDefinition});
            }
            if (data.hasOwnProperty('references')) {
                obj['references'] = ApiClient.convertToType(data['references'], {'String': EntityDefinitionReference});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntityDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntityDefinition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The name of the entity, which follows a specific string pattern and has a maximum byte size.
 * @member {String} name
 */
EntityDefinition.prototype['name'] = undefined;

/**
 * Map of relation definitions within this entity. The key is the relation name, and the value is the RelationDefinition.
 * @member {Object.<String, module:model/RelationDefinition>} relations
 */
EntityDefinition.prototype['relations'] = undefined;

/**
 * Map of permission definitions within this entity. The key is the permission name, and the value is the PermissionDefinition.
 * @member {Object.<String, module:model/PermissionDefinition>} permissions
 */
EntityDefinition.prototype['permissions'] = undefined;

/**
 * Map of attribute definitions within this entity. The key is the attribute name, and the value is the AttributeDefinition.
 * @member {Object.<String, module:model/AttributeDefinition>} attributes
 */
EntityDefinition.prototype['attributes'] = undefined;

/**
 * Map of references indicating whether a string pertains to a relation, permission, or attribute.
 * @member {Object.<String, module:model/EntityDefinitionReference>} references
 */
EntityDefinition.prototype['references'] = undefined;






export default EntityDefinition;

