/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityDefinition from './EntityDefinition';
import RuleDefinition from './RuleDefinition';
import SchemaDefinitionReference from './SchemaDefinitionReference';

/**
 * The SchemaDefinition model module.
 * @module model/SchemaDefinition
 * @version v0.9.9
 */
class SchemaDefinition {
    /**
     * Constructs a new <code>SchemaDefinition</code>.
     * The SchemaDefinition message provides definitions for entities and rules, and includes references to clarify whether a name refers to an entity or a rule.
     * @alias module:model/SchemaDefinition
     */
    constructor() { 
        
        SchemaDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SchemaDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SchemaDefinition} obj Optional instance to populate.
     * @return {module:model/SchemaDefinition} The populated <code>SchemaDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SchemaDefinition();

            if (data.hasOwnProperty('entityDefinitions')) {
                obj['entityDefinitions'] = ApiClient.convertToType(data['entityDefinitions'], {'String': EntityDefinition});
            }
            if (data.hasOwnProperty('ruleDefinitions')) {
                obj['ruleDefinitions'] = ApiClient.convertToType(data['ruleDefinitions'], {'String': RuleDefinition});
            }
            if (data.hasOwnProperty('references')) {
                obj['references'] = ApiClient.convertToType(data['references'], {'String': SchemaDefinitionReference});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SchemaDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SchemaDefinition</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
 * @member {Object.<String, module:model/EntityDefinition>} entityDefinitions
 */
SchemaDefinition.prototype['entityDefinitions'] = undefined;

/**
 * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
 * @member {Object.<String, module:model/RuleDefinition>} ruleDefinitions
 */
SchemaDefinition.prototype['ruleDefinitions'] = undefined;

/**
 * Map of references to signify whether a string refers to an entity or a rule.
 * @member {Object.<String, module:model/SchemaDefinitionReference>} references
 */
SchemaDefinition.prototype['references'] = undefined;






export default SchemaDefinition;

